IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0
        },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
        [Symbol(kPaused)
        ]: null
    },
    readable: true,
    _events: [Object: null prototype
    ] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0
            },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
            [Symbol(kPaused)
            ]: false
        },
      readable: true,
      _events: [Object: null prototype
        ] {
        end: [Array
            ],
        timeout: [Function: socketOnTimeout
            ],
        data: [Function: bound socketOnData
            ],
        error: [Function: socketOnError
            ],
        close: [Array
            ],
        drain: [Function: bound socketOnDrain
            ],
        resume: [Function: onSocketResume
            ],
        pause: [Function: onSocketPause
            ]
        },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
            ],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
            ]
        },
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        insecureHTTPParser: undefined,
        _events: [Object: null prototype
            ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(asyncId)
            ]: 2
        },
      _server: Server {
        insecureHTTPParser: undefined,
        _events: [Object: null prototype
            ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(asyncId)
            ]: 2
        },
      timeout: 120000,
      parser: HTTPParser {
        '0': [Function: parserOnHeaders
            ],
        '1': [Function: parserOnHeadersComplete
            ],
        '2': [Function: parserOnBody
            ],
        '3': [Function: parserOnMessageComplete
            ],
        '4': [Function: bound onParserExecute
            ],
        '5': [Function: bound onParserTimeout
            ],
        _headers: [],
        _url: '',
        socket: [Circular
            ],
        incoming: [Circular
            ],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming
            ],
            [Symbol(resource_symbol)
            ]: [HTTPServerAsyncResource
            ]
        },
      on: [Function: socketListenerWrap
        ],
      addListener: [Function: socketListenerWrap
        ],
      prependListener: [Function: socketListenerWrap
        ],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype
            ],
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
            ],
        connection: [Circular
            ],
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData
            ],
        _sent100: false,
        _expect_continue: false,
            [Symbol(kCapture)
            ]: false,
            [Symbol(kNeedDrain)
            ]: false,
            [Symbol(corked)
            ]: 0,
            [Symbol(kOutHeaders)
            ]: null
        },
        [Symbol(asyncId)
        ]: 8,
        [Symbol(kHandle)
        ]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
            [Symbol(owner_symbol)
            ]: [Circular
            ]
        },
        [Symbol(kSetNoDelay)
        ]: false,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList
            ],
        _idleNext: [TimersList
            ],
        _idleStart: 425,
        _onTimeout: [Function: bound
            ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
            [Symbol(refed)
            ]: false,
            [Symbol(kHasPrimitive)
            ]: false,
            [Symbol(asyncId)
            ]: 9,
            [Symbol(triggerId)
            ]: 8
        },
        [Symbol(kBuffer)
        ]: null,
        [Symbol(kBufferCb)
        ]: null,
        [Symbol(kBufferGen)
        ]: null,
        [Symbol(kCapture)
        ]: false,
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0
            },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
            [Symbol(kPaused)
            ]: false
        },
      readable: true,
      _events: [Object: null prototype
        ] {
        end: [Array
            ],
        timeout: [Function: socketOnTimeout
            ],
        data: [Function: bound socketOnData
            ],
        error: [Function: socketOnError
            ],
        close: [Array
            ],
        drain: [Function: bound socketOnDrain
            ],
        resume: [Function: onSocketResume
            ],
        pause: [Function: onSocketPause
            ]
        },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
            ],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
            ]
        },
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        insecureHTTPParser: undefined,
        _events: [Object: null prototype
            ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(asyncId)
            ]: 2
        },
      _server: Server {
        insecureHTTPParser: undefined,
        _events: [Object: null prototype
            ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(asyncId)
            ]: 2
        },
      timeout: 120000,
      parser: HTTPParser {
        '0': [Function: parserOnHeaders
            ],
        '1': [Function: parserOnHeadersComplete
            ],
        '2': [Function: parserOnBody
            ],
        '3': [Function: parserOnMessageComplete
            ],
        '4': [Function: bound onParserExecute
            ],
        '5': [Function: bound onParserTimeout
            ],
        _headers: [],
        _url: '',
        socket: [Circular
            ],
        incoming: [Circular
            ],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming
            ],
            [Symbol(resource_symbol)
            ]: [HTTPServerAsyncResource
            ]
        },
      on: [Function: socketListenerWrap
        ],
      addListener: [Function: socketListenerWrap
        ],
      prependListener: [Function: socketListenerWrap
        ],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype
            ],
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
            ],
        connection: [Circular
            ],
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData
            ],
        _sent100: false,
        _expect_continue: false,
            [Symbol(kCapture)
            ]: false,
            [Symbol(kNeedDrain)
            ]: false,
            [Symbol(corked)
            ]: 0,
            [Symbol(kOutHeaders)
            ]: null
        },
        [Symbol(asyncId)
        ]: 8,
        [Symbol(kHandle)
        ]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
            [Symbol(owner_symbol)
            ]: [Circular
            ]
        },
        [Symbol(kSetNoDelay)
        ]: false,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList
            ],
        _idleNext: [TimersList
            ],
        _idleStart: 425,
        _onTimeout: [Function: bound
            ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
            [Symbol(refed)
            ]: false,
            [Symbol(kHasPrimitive)
            ]: false,
            [Symbol(asyncId)
            ]: 9,
            [Symbol(triggerId)
            ]: 8
        },
        [Symbol(kBuffer)
        ]: null,
        [Symbol(kBufferCb)
        ]: null,
        [Symbol(kBufferGen)
        ]: null,
        [Symbol(kCapture)
        ]: false,
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: '674e9c3a-8684-4a93-b7f9-89cdef29c177.id.repl.co',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,* /*;q=0.8,application/signed-exchange;v=b3;q=0.9',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'en-US,en;q=0.9',
      referer: 'https://replit.com/',
      'sec-ch-ua': '"Google Chrome";v="89", "Chromium";v="89", ";Not A Brand";v="99"',
      'sec-ch-ua-mobile': '?0',
      'sec-fetch-dest': 'iframe',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-site': 'cross-site',
      'upgrade-insecure-requests': '1',
      'x-forwarded-for': '35.191.10.232',
      'x-forwarded-proto': 'https',
      'x-replit-user-id': '',
      'x-replit-user-name': '',
      'x-replit-user-roles': ''
    },
    rawHeaders: [
      'Host',
      '674e9c3a-8684-4a93-b7f9-89cdef29c177.id.repl.co',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'en-US,en;q=0.9',
      'Referer',
      'https: //replit.com/',
      'Sec-Ch-Ua',
      '"Google Chrome";v="89",
        "Chromium";v="89",
        ";Not A Brand";v="99"',
      'Sec-Ch-Ua-Mobile',
      '?0',
      'Sec-Fetch-Dest',
      'iframe',
      'Sec-Fetch-Mode',
      'navigate',
      'Sec-Fetch-Site',
      'cross-site',
      'Upgrade-Insecure-Requests',
      '1',
      'X-Forwarded-For',
      '35.191.10.232',
      'X-Forwarded-Proto',
      'https',
      'X-Replit-User-Id',
      '',
      'X-Replit-User-Name',
      '',
      'X-Replit-User-Roles',
      ''
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0
            },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
            [Symbol(kPaused)
            ]: false
        },
      readable: true,
      _events: [Object: null prototype
        ] {
        end: [Array
            ],
        timeout: [Function: socketOnTimeout
            ],
        data: [Function: bound socketOnData
            ],
        error: [Function: socketOnError
            ],
        close: [Array
            ],
        drain: [Function: bound socketOnDrain
            ],
        resume: [Function: onSocketResume
            ],
        pause: [Function: onSocketPause
            ]
        },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
            ],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
            ]
        },
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        insecureHTTPParser: undefined,
        _events: [Object: null prototype
            ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(asyncId)
            ]: 2
        },
      _server: Server {
        insecureHTTPParser: undefined,
        _events: [Object: null prototype
            ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(asyncId)
            ]: 2
        },
      timeout: 120000,
      parser: HTTPParser {
        '0': [Function: parserOnHeaders
            ],
        '1': [Function: parserOnHeadersComplete
            ],
        '2': [Function: parserOnBody
            ],
        '3': [Function: parserOnMessageComplete
            ],
        '4': [Function: bound onParserExecute
            ],
        '5': [Function: bound onParserTimeout
            ],
        _headers: [],
        _url: '',
        socket: [Circular
            ],
        incoming: [Circular
            ],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming
            ],
            [Symbol(resource_symbol)
            ]: [HTTPServerAsyncResource
            ]
        },
      on: [Function: socketListenerWrap
        ],
      addListener: [Function: socketListenerWrap
        ],
      prependListener: [Function: socketListenerWrap
        ],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype
            ],
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
            ],
        connection: [Circular
            ],
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData
            ],
        _sent100: false,
        _expect_continue: false,
            [Symbol(kCapture)
            ]: false,
            [Symbol(kNeedDrain)
            ]: false,
            [Symbol(corked)
            ]: 0,
            [Symbol(kOutHeaders)
            ]: null
        },
        [Symbol(asyncId)
        ]: 8,
        [Symbol(kHandle)
        ]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
            [Symbol(owner_symbol)
            ]: [Circular
            ]
        },
        [Symbol(kSetNoDelay)
        ]: false,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList
            ],
        _idleNext: [TimersList
            ],
        _idleStart: 425,
        _onTimeout: [Function: bound
            ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
            [Symbol(refed)
            ]: false,
            [Symbol(kHasPrimitive)
            ]: false,
            [Symbol(asyncId)
            ]: 9,
            [Symbol(triggerId)
            ]: 8
        },
        [Symbol(kBuffer)
        ]: null,
        [Symbol(kBufferCb)
        ]: null,
        [Symbol(kBufferGen)
        ]: null,
        [Symbol(kCapture)
        ]: false,
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    _consuming: false,
    _dumped: false,
    [Symbol(kCapture)
    ]: false
}
  ````````````````
  ServerResponse {
    _events: [Object: null prototype
    ] { finish: [Function: bound resOnFinish
        ]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0
            },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
            [Symbol(kPaused)
            ]: false
        },
      readable: true,
      _events: [Object: null prototype
        ] {
        end: [Array
            ],
        timeout: [Function: socketOnTimeout
            ],
        data: [Function: bound socketOnData
            ],
        error: [Function: socketOnError
            ],
        close: [Array
            ],
        drain: [Function: bound socketOnDrain
            ],
        resume: [Function: onSocketResume
            ],
        pause: [Function: onSocketPause
            ]
        },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
            ],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
            ]
        },
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        insecureHTTPParser: undefined,
        _events: [Object: null prototype
            ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(asyncId)
            ]: 2
        },
      _server: Server {
        insecureHTTPParser: undefined,
        _events: [Object: null prototype
            ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(asyncId)
            ]: 2
        },
      timeout: 120000,
      parser: HTTPParser {
        '0': [Function: parserOnHeaders
            ],
        '1': [Function: parserOnHeadersComplete
            ],
        '2': [Function: parserOnBody
            ],
        '3': [Function: parserOnMessageComplete
            ],
        '4': [Function: bound onParserExecute
            ],
        '5': [Function: bound onParserTimeout
            ],
        _headers: [],
        _url: '',
        socket: [Circular
            ],
        incoming: [IncomingMessage
            ],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming
            ],
            [Symbol(resource_symbol)
            ]: [HTTPServerAsyncResource
            ]
        },
      on: [Function: socketListenerWrap
        ],
      addListener: [Function: socketListenerWrap
        ],
      prependListener: [Function: socketListenerWrap
        ],
      _paused: false,
      _httpMessage: [Circular
        ],
        [Symbol(asyncId)
        ]: 8,
        [Symbol(kHandle)
        ]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
            [Symbol(owner_symbol)
            ]: [Circular
            ]
        },
        [Symbol(kSetNoDelay)
        ]: false,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList
            ],
        _idleNext: [TimersList
            ],
        _idleStart: 425,
        _onTimeout: [Function: bound
            ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
            [Symbol(refed)
            ]: false,
            [Symbol(kHasPrimitive)
            ]: false,
            [Symbol(asyncId)
            ]: 9,
            [Symbol(triggerId)
            ]: 8
        },
        [Symbol(kBuffer)
        ]: null,
        [Symbol(kBufferCb)
        ]: null,
        [Symbol(kBufferGen)
        ]: null,
        [Symbol(kCapture)
        ]: false,
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0
            },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        decoder: null,
        encoding: null,
            [Symbol(kPaused)
            ]: false
        },
      readable: true,
      _events: [Object: null prototype
        ] {
        end: [Array
            ],
        timeout: [Function: socketOnTimeout
            ],
        data: [Function: bound socketOnData
            ],
        error: [Function: socketOnError
            ],
        close: [Array
            ],
        drain: [Function: bound socketOnDrain
            ],
        resume: [Function: onSocketResume
            ],
        pause: [Function: onSocketPause
            ]
        },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
            ],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
            ]
        },
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        insecureHTTPParser: undefined,
        _events: [Object: null prototype
            ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(asyncId)
            ]: 2
        },
      _server: Server {
        insecureHTTPParser: undefined,
        _events: [Object: null prototype
            ],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        _connectionKey: '6: : : : 3000',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(kCapture)
            ]: false,
            [Symbol(asyncId)
            ]: 2
        },
      timeout: 120000,
      parser: HTTPParser {
        '0': [Function: parserOnHeaders
            ],
        '1': [Function: parserOnHeadersComplete
            ],
        '2': [Function: parserOnBody
            ],
        '3': [Function: parserOnMessageComplete
            ],
        '4': [Function: bound onParserExecute
            ],
        '5': [Function: bound onParserTimeout
            ],
        _headers: [],
        _url: '',
        socket: [Circular
            ],
        incoming: [IncomingMessage
            ],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming
            ],
            [Symbol(resource_symbol)
            ]: [HTTPServerAsyncResource
            ]
        },
      on: [Function: socketListenerWrap
        ],
      addListener: [Function: socketListenerWrap
        ],
      prependListener: [Function: socketListenerWrap
        ],
      _paused: false,
      _httpMessage: [Circular
        ],
        [Symbol(asyncId)
        ]: 8,
        [Symbol(kHandle)
        ]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
            [Symbol(owner_symbol)
            ]: [Circular
            ]
        },
        [Symbol(kSetNoDelay)
        ]: false,
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList
            ],
        _idleNext: [TimersList
            ],
        _idleStart: 425,
        _onTimeout: [Function: bound
            ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
            [Symbol(refed)
            ]: false,
            [Symbol(kHasPrimitive)
            ]: false,
            [Symbol(asyncId)
            ]: 9,
            [Symbol(triggerId)
            ]: 8
        },
        [Symbol(kBuffer)
        ]: null,
        [Symbol(kBufferCb)
        ]: null,
        [Symbol(kBufferGen)
        ]: null,
        [Symbol(kCapture)
        ]: false,
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData
    ],
    _sent100: false,
    _expect_continue: false,
    [Symbol(kCapture)
    ]: false,
    [Symbol(kNeedDrain)
    ]: false,
    [Symbol(corked)
    ]: 0,
    [Symbol(kOutHeaders)
    ]: null
}